spring:
  application:
    name: order-service
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/order-service}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
  jpa:
    open-in-view: false
    show-sql: true
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
server:
  port: 8082
  shutdown: graceful
management:
  endpoints:
    web:
      exposure:
        include: '*'
  info:
    git:
      mode: full

orders:
  catalog-service-url: http://localhost:8081
  order-events-exchange: orders-exchange
  new-orders-queue: new-orders
  delivered-orders-queue: delivered-orders
  cancelled-orders-queue: cancelled-orders
  error-orders-queue: error-orders

## Resilience4J configuration
resilience4j:
  retry:
    backends:
      catalog-service:
        max-attempts: 2
        wait-duration:
          seconds: 1
  circuitbreaker:
    backends:
      catalog-service:
        sliding-window-type: count_based
        sliding-window-size: 6
        minimum-number-of-calls: 4
        wait-duration-in-open-state:
          seconds: 20
        permitted-number-of-calls-in-half-open-state: 2
        failure-rate-threshold: 50
